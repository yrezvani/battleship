{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/controller.js","webpack://battleship/./src/gameBoard.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/index.js"],"sourcesContent":["const createGameboard = require('./gameBoard');\nconst player = require('./player');\n\nconst controller = function () {\n    let playerGameboard = createGameboard();\n    let aiGameboard = createGameboard();\n\n    function resetGame() {\n        playerGameboard = createGameboard();\n        aiGameboard = createGameboard();\n    }\n\n    return {\n        playerGameboard,\n        aiGameboard,\n        resetGame,\n    };\n};\n\nmodule.exports = controller;\n","const createShip = require('./ship');\n\nconst createGameboard = function () {\n    let board = Array(10)\n        .fill(null)\n        .map(() => Array(10).fill(null));\n    let ships = [];\n    let missedShots = [];\n    let successfulHits = [];\n    let prevMoves = [];\n\n    const placeShip = function (x, y, length, orientation) {\n        if (!isValidPlacement(x, y, length, orientation)) {\n            console.log('Invalid placement');\n            return false;\n        }\n\n        const newShip = createShip(length, orientation, x, y);\n        ships.push(newShip);\n\n        for (let i = 0; i < length; i++) {\n            let segmentInfo = { ship: newShip, segmentIndex: i };\n            if (orientation === 'Horizontal') {\n                board[y][x + i] = segmentInfo;\n            } else {\n                board[y + i][x] = segmentInfo;\n            }\n        }\n        console.log(`Placed ship at (${x}, ${y}) with length ${length} and orientation ${orientation}.`);\n        return true;\n    };\n\n    const isValidPlacement = function (x, y, length, orientation) {\n        if (!orientation === 'Horizontal' && !orientation === 'Vertical') {\n            console.log('Invalid orientation');\n            return false;\n        }\n        // Loop through each segment of the new ship to check for valid placement\n        for (let i = 0; i < length; i++) {\n            let newX = orientation === 'Horizontal' ? x + i : x;\n            let newY = orientation === 'Vertical' ? y + i : y;\n\n            // Boundary check: Ensure the ship doesn't go beyond the game board\n            if (newX > 9 || newY > 9) {\n                console.log(`Invalid placement: Ship exceeds boundaries at (${newX}, ${newY})`);\n                return false;\n            }\n\n            // Overlap check: Ensure the ship doesn't overlap with existing ships\n            for (const ship of ships) {\n                let { startX, startY, orientation: shipOrientation } = ship.coordinates;\n\n                // Check each segment of the existing ships\n                for (let j = 0; j < ship.length; j++) {\n                    let shipX = shipOrientation === 'Horizontal' ? startX + j : startX;\n                    let shipY = shipOrientation === 'Vertical' ? startY + j : startY;\n\n                    if (newX === shipX && newY === shipY) {\n                        console.log(`Overlap detected with ship at (${startX}, ${startY})`);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        // If no boundary issues or overlaps were detected, the placement is valid\n        return true;\n    };\n\n    const getCell = function (x, y) {\n        return board[y][x];\n    };\n\n    const receiveAttack = function (x, y) {\n        let hitMade = false;\n\n        ships.forEach((ship) => {\n            let { startX, startY, orientation } = ship.coordinates;\n\n            for (let i = 0; i < ship.length; i++) {\n                let shipX = orientation === 'Horizontal' ? startX + i : startX;\n                let shipY = orientation === 'Vertical' ? startY + i : startY;\n\n                if (x === shipX && y === shipY) {\n                    ship.hit(i);\n                    successfulHits.push({ x: x, y: y });\n                    console.log('Hit detected at:', x, y);\n                    hitMade = true;\n                    break;\n                }\n            }\n        });\n\n        if (!hitMade) {\n            missedShots.push({ x: x, y: y });\n            console.log('Missed shot at:', x, y);\n            return false;\n        }\n\n        return hitMade;\n    };\n\n    const getMissedShots = function () {\n        return missedShots;\n    };\n\n    const getSuccessfulHits = function () {\n        return successfulHits;\n    };\n\n    const getShips = function () {\n        return ships;\n    };\n\n    const allSunk = function () {\n        for (const ship of ships) {\n            if (!ship.isSunk()) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    return {\n        placeShip,\n        getCell,\n        receiveAttack,\n        getMissedShots,\n        getSuccessfulHits,\n        allSunk,\n        getShips,\n    };\n};\n\nmodule.exports = createGameboard;\n","\nconst player = function () {\n    const prevMoves = [];\n\n    const generateRandCoordinates = function () {\n        \n        const getRandXY = function () {\n            const x = Math.floor(Math.random()* 10);\n            const y = Math.floor(Math.random() * 10);\n\n            return {\n                'x': x,\n                'y': y\n            }\n        }\n        \n        let newCoordinates;\n        let newCoordinatesStr;\n        do {\n            newCoordinates = getRandXY();\n            newCoordinatesStr = `${newCoordinates.x.toString()},${newCoordinates.y.toString()}`;\n        } while (prevMoves.includes(newCoordinatesStr));\n        \n        prevMoves.push(newCoordinatesStr);\n        return newCoordinates\n    }\n\n    return {\n        prevMoves,\n        generateRandCoordinates\n\n    }\n\n}\n\nmodule.exports = player;","const createShip = function (length, orientation, startX, startY) {\n    const hits = new Array(length).fill(false);\n\n    let coordinates = { startX, startY, orientation };\n\n    console.log('ship created');\n    return {\n        length: length,\n        hits: hits,\n        coordinates,\n        hit: function (position) {\n            if (position >= 0 && position < this.length) {\n                this.hits[position] = true;\n            }\n            return this;\n        },\n        isSunk: function () {\n            return this.hits.every((part) => part === true);\n        },\n    };\n};\n\nmodule.exports = createShip;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const controller = require('./controller');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const createGrid = function (side) {\n        const grid = document.querySelector(`.${side}`);\n        grid.innerHTML = '';\n\n        for (let y = 0; y < 10; y++) {\n            const row = document.createElement('div');\n            row.classList.add('row');\n\n            for (let x = 0; x < 10; x++) {\n                const cell = document.createElement('div');\n                cell.classList.add('cell');\n                cell.dataset.x = x;\n                cell.dataset.y = y;\n                row.append(cell);\n            }\n\n            grid.append(row);\n        }\n    };\n\n    // Ship sizes to place\n    let shipsToPlace = [4, 4, 3, 3, 2];\n    // Current orientation of the ship to be placed\n    let currentOrientation = 'Horizontal';\n\n    let gameControl = controller();\n\n    createGrid('friendly');\n    createGrid('enemy');\n    updateGameUIForNextPhase();\n\n    document.querySelector('.orientation-btn').addEventListener('click', function (e) {\n        currentOrientation = currentOrientation === 'Horizontal' ? 'Vertical' : 'Horizontal';\n        const orientationEl = e.target.nextElementSibling;\n\n        orientationEl.textContent = currentOrientation;\n    });\n\n    const placeShip = function (e) {\n        if (!e.target.classList.contains('cell')) return;\n        const cell = e.target;\n\n        const startX = parseInt(cell.dataset.x, 10);\n        const startY = parseInt(cell.dataset.y, 10);\n\n        const orientation = currentOrientation;\n\n        const shipLength = shipsToPlace[0];\n        const shipCoordinates = calculateShipCoordinates(startX, startY, shipLength, orientation);\n\n        const placementSuccess = gameControl.playerGameboard.placeShip(startX, startY, shipLength, orientation);\n\n        if (placementSuccess === false) {\n            alert('Invalid placement! Try again!');\n            return;\n        } else {\n            shipsToPlace.shift();\n            updateGameUIForNextPhase();\n            shipCoordinates.forEach((coords) => {\n                const shipCell = document.querySelector(\n                    `.grid.friendly .cell[data-x=\"${coords.x}\"][data-y=\"${coords.y}\"]`\n                );\n                if (shipCell) {\n                    addIconToCell(shipCell, 'ship');\n                }\n            });\n        }\n    };\n\n    function addIconToCell(cell, icon) {\n        const iconEl = document.createElement('i');\n        if (icon === 'ship') {\n            iconEl.className = `fa-solid fa-ship`;\n        } else if (icon === 'hit') {\n            cell.textContent = '💥';\n        } else cell.textContent = '🚫';\n        cell.append(iconEl);\n    }\n\n    document.querySelector('.grid.friendly').addEventListener('click', placeShip);\n\n    const calculateShipCoordinates = function (startX, startY, length, orientation) {\n        const shipCoordinates = [];\n\n        if (orientation === 'Horizontal') {\n            for (let i = 0; i < length; i++) {\n                shipCoordinates.push({ x: startX + i, y: startY });\n            }\n        } else {\n            for (let i = 0; i < length; i++) {\n                shipCoordinates.push({ x: startX, y: startY + i });\n            }\n        }\n\n        return shipCoordinates;\n    };\n\n    function updateGameUIForNextPhase() {\n        const shipLengthDisplay = document.getElementById('ship-length');\n        const orientationEl = document.getElementById('orientation');\n        const orientationBtn = document.querySelector('.orientation-btn');\n        const textContainerEl = document.querySelector('.text-container');\n        const feedbackEl = document.querySelector('.feedback');\n        if (shipsToPlace.length > 0) {\n            const nextShipLength = shipsToPlace[0];\n            shipLengthDisplay.textContent = `Click to place a ship (length: ${nextShipLength})`;\n        } else {\n            shipLengthDisplay.style.display = 'none';\n            orientationEl.style.display = 'none';\n            orientationBtn.style.display = 'none';\n            const boardEl = document.createElement('h2');\n            boardEl.textContent = 'Your Waters';\n            boardEl.classList.add('side');\n            textContainerEl.append(boardEl);\n            document.querySelector('.grid.friendly').removeEventListener('click', placeShip);\n            placeAiShips();\n            feedbackEl.textContent = 'Attack AI ships';\n            document.querySelector('.grid.enemy').addEventListener('click', attackAi);\n        }\n    }\n\n    const placeAiShips = function () {\n        const aiShipsToPlace = [4, 4, 3, 3, 2];\n        const orientationChoices = ['Horizontal', 'Vertical'];\n\n        console.log(`Before loop: ${aiShipsToPlace}`);\n        aiShipsToPlace.forEach((length) => {\n            console.log('Starting AI ship placement.');\n            console.log(`Inside loop: ${aiShipsToPlace}`);\n            let placed = false;\n            let attempts = 0;\n            const maxAttempts = 100; // Set a reasonable limit to prevent infinite loops\n\n            do {\n                console.log(`length: ${length}`);\n                const startX = Math.floor(Math.random() * 10);\n                const startY = Math.floor(Math.random() * 10);\n                const randomIndex = Math.floor(Math.random() * orientationChoices.length);\n                const orientation = orientationChoices[randomIndex];\n\n                placed = gameControl.aiGameboard.placeShip(startX, startY, length, orientation);\n                attempts++;\n                if (attempts > maxAttempts) {\n                    console.log(`Failed to place AI ship of length ${length} after ${maxAttempts} attempts.`);\n                    // Consider resetting the board or implementing an alternative strategy here\n                    break; // Break out of the loop to avoid freezing the browser\n                }\n            } while (!placed);\n        });\n    };\n\n    function attackAi(e) {\n        const feedbackEl = document.querySelector('.feedback');\n\n        if (!e.target.classList.contains('cell')) return;\n        const cell = e.target;\n\n        const startX = parseInt(cell.dataset.x);\n        const startY = parseInt(cell.dataset.y);\n\n        console.log(gameControl.aiGameboard.getCell(startX, startY));\n        const attackCell = gameControl.aiGameboard.receiveAttack(startX, startY);\n        if (attackCell) {\n            addIconToCell(cell, 'hit');\n        } else addIconToCell(cell, 'miss');\n\n        if (gameControl.aiGameboard.allSunk()) {\n            feedbackEl.textContent = 'You Win!';\n            document.querySelector('.grid.enemy').removeEventListener('click', attackAi);\n        } else attackHuman();\n    }\n\n    function attackHuman() {\n        let startX, startY;\n        const feedbackEl = document.querySelector('.feedback');\n        const missedShots = gameControl.playerGameboard.getMissedShots();\n        const successfulHits = gameControl.playerGameboard.getSuccessfulHits();\n        const previousShots = missedShots.concat(successfulHits);\n        let isUnique = true;\n\n        while (true) {\n            isUnique = true;\n            startX = Math.floor(Math.random() * 10);\n            startY = Math.floor(Math.random() * 10);\n\n            for (const shot of previousShots) {\n                if (shot.x === startX && shot.y === startY) {\n                    isUnique = false;\n                    break;\n                }\n            }\n\n            if (isUnique) {\n                const cell = document.querySelector(`.grid.friendly .cell[data-x=\"${startX}\"][data-y=\"${startY}\"]`);\n                const attackPlayerCell = gameControl.playerGameboard.receiveAttack(startX, startY);\n\n                if (attackPlayerCell) {\n                    addIconToCell(cell, 'hit');\n                } else addIconToCell(cell, 'miss');\n\n                if (gameControl.playerGameboard.allSunk()) {\n                    feedbackEl.textContent = 'You Lost!';\n                    document.querySelector('.grid.enemy').removeEventListener('click', attackAi);\n                }\n                break;\n            }\n        }\n    }\n\n    document.getElementById('reset').addEventListener('click', resetGame);\n\n    function resetGame() {\n        const feedbackEl = document.querySelector('.feedback');\n        shipsToPlace = [4, 4, 3, 3, 2];\n        currentOrientation = 'Horizontal';\n        const cells = document.querySelectorAll('.cell');\n\n        feedbackEl.textContent = 'Place your ships';\n        updateGameUIForNextPhase();\n        gameControl = controller();\n        gameControl.resetGame();\n\n        cells.forEach((cell) => {\n            if (cell.firstChild) {\n                cell.removeChild(cell.firstChild);\n                cell.className = 'cell';\n            }\n        });\n        document.querySelector('.grid.friendly').addEventListener('click', placeShip);\n    }\n});\n"],"names":["createGameboard","module","exports","playerGameboard","aiGameboard","resetGame","createShip","board","Array","fill","map","ships","missedShots","successfulHits","placeShip","x","y","length","orientation","console","log","i","newX","newY","ship","startX","startY","shipOrientation","coordinates","j","isValidPlacement","newShip","push","segmentInfo","segmentIndex","getCell","receiveAttack","hitMade","forEach","hit","getMissedShots","getSuccessfulHits","allSunk","isSunk","getShips","prevMoves","generateRandCoordinates","newCoordinates","newCoordinatesStr","Math","floor","random","toString","includes","hits","position","this","every","part","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","controller","document","addEventListener","createGrid","side","grid","querySelector","innerHTML","row","createElement","classList","add","cell","dataset","append","shipsToPlace","currentOrientation","gameControl","updateGameUIForNextPhase","e","target","nextElementSibling","textContent","contains","parseInt","shipLength","shipCoordinates","calculateShipCoordinates","shift","coords","shipCell","addIconToCell","alert","icon","iconEl","className","shipLengthDisplay","getElementById","orientationEl","orientationBtn","textContainerEl","feedbackEl","nextShipLength","style","display","boardEl","removeEventListener","placeAiShips","attackAi","aiShipsToPlace","orientationChoices","placed","attempts","randomIndex","previousShots","concat","isUnique","shot","attackHuman","cells","querySelectorAll","firstChild","removeChild"],"sourceRoot":""}